import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="–°–º–µ—Ç–∞ –ø–æ –ø—Ä–∞–π—Å—É", page_icon="üìò", layout="wide")

st.title("üìò –°–º–µ—Ç–∞ –ø–æ –ø—Ä–∞–π—Å—É")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å–∞ ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç (price_list_processed.csv)", type="csv")

if uploaded_file:
    price_df = pd.read_csv(uploaded_file)
    price_df['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = price_df['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'].fillna('')
    price_df['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = price_df['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.strip()
    price_df['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = price_df['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'].str.strip()

    price_df['–∫–ª—é—á_–ø–æ–∏—Å–∫–∞'] = price_df.apply(
        lambda r: f"{r['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']} | {r['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ']}" if r['–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ'] else r['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'], axis=1
    )

    price_lookup = price_df.set_index('–∫–ª—é—á_–ø–æ–∏—Å–∫–∞')['—Ü–µ–Ω–∞'].to_dict()
    unit_lookup = price_df.set_index('–∫–ª—é—á_–ø–æ–∏—Å–∫–∞')['–µ–¥ –∏–∑–º'].to_dict()

    st.success("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    # --- –í–≤–æ–¥ –ø–æ–∑–∏—Ü–∏–π ---
    st.subheader("–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")

    num_rows = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π", 1, 30, 3)

    order_data = []
    for i in range(num_rows):
        st.markdown(f"### –ü–æ–∑–∏—Ü–∏—è {i+1}")
        col1, col2, col3, col4, col5 = st.columns([3, 1, 1, 1, 1])
        name = col1.selectbox(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ {i+1}", list(price_lookup.keys()), key=f"name_{i}")
        typ = col2.selectbox("–¢–∏–ø", ["—à—Ç", "–º/–ø", "–∫–≤/–º"], key=f"type_{i}")
        width = col3.number_input("–®–∏—Ä–∏–Ω–∞", value=0.0, key=f"width_{i}")
        height = col4.number_input("–í—ã—Å–æ—Ç–∞", value=0.0, key=f"height_{i}")
        qty = col5.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", value=0.0, key=f"qty_{i}")

        order_data.append({
            "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
            "—Ç–∏–ø": typ,
            "—à–∏—Ä–∏–Ω–∞": width,
            "–≤—ã—Å–æ—Ç–∞": height,
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty
        })

    markup = st.number_input("–ù–∞—Ü–µ–Ω–∫–∞ (%)", value=11.0, min_value=0.0)

    if st.button("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
        MARKUP_PERCENTAGE = markup / 100
        receipt_items = []
        total_base_cost = 0

        for item in order_data:
            item_name_key = item["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
            item_type = item["—Ç–∏–ø"]
            price = price_lookup.get(item_name_key)
            unit = unit_lookup.get(item_name_key, '—à—Ç')

            if price is None:
                st.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {item_name_key}")
                continue

            if item_type == "–∫–≤/–º":
                quantity = item["—à–∏—Ä–∏–Ω–∞"] * item["–≤—ã—Å–æ—Ç–∞"]
            else:
                quantity = item["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"]

            if quantity == 0:
                st.warning(f"‚ö† –ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è: {item_name_key}")
                continue

            base_cost = price * quantity
            final_cost = base_cost * (1 + MARKUP_PERCENTAGE)
            total_base_cost += base_cost

            receipt_items.append({
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": item_name_key,
                "–ö–æ–ª-–≤–æ": f"{quantity:.2f} {unit}",
                "–¶–µ–Ω–∞": price,
                "–°—É–º–º–∞": base_cost,
                "–ò—Ç–æ–≥–æ (—Å –Ω–∞—Ü–µ–Ω–∫–æ–π)": final_cost
            })

        if receipt_items:
            df_result = pd.DataFrame(receipt_items)
            total_final_cost = total_base_cost * (1 + MARKUP_PERCENTAGE)

            st.subheader("üìã –ì–æ—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞")
            st.dataframe(df_result, use_container_width=True)

            st.markdown(f"**–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞:** {total_base_cost:,.0f} ‚Ç∏")
            st.markdown(f"**–ò—Ç–æ–≥–æ (—Å –Ω–∞—Ü–µ–Ω–∫–æ–π {markup:.0f}%):** {total_final_cost:,.0f} ‚Ç∏")

            # --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel ---
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                df_result.to_excel(writer, index=False, sheet_name="–°–º–µ—Ç–∞")
                summary_df = pd.DataFrame({
                    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": ["–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞", f"–ò—Ç–æ–≥–æ (—Å –Ω–∞—Ü–µ–Ω–∫–æ–π {markup:.0f}%)"],
                    "–°—É–º–º–∞": [total_base_cost, total_final_cost]
                })
                summary_df.to_excel(writer, index=False, sheet_name="–ò—Ç–æ–≥", startrow=2)
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å —Å–º–µ—Ç—É –≤ Excel",
                data=buffer.getvalue(),
                file_name="smeta.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç.")
